import simplegui
from user305_o32FtUyCKk_0 import Vector

CANVAS_WIDTH = 600
CANVAS_HEIGHT = 300

class WallLength:
    def __init__(self, x, border, color):
        self.x = x
        self.border = border
        self.color = color
        self.normal = Vector(1,0)
        self.edge_r = x + border
        self.edge_l = x - border
        
    def draw(self, canvas):
        canvas.draw_line((self.x, 0),
                         (self.x, CANVAS_HEIGHT),
                          2*self.border+1,
                          self.color)
        
    def hit(self, ball):        
        if self.edge_r >= ball.offset_1() >= self.edge_l:
            return -1
        elif self.edge_l <= ball.offset_2() <= self.edge_r:
            return 1
        else: return 0
        
    def print_hit_wall(self):
        print("Hit on left side:", ball.offset_1() <= self.edge_r)
        print("Hit on right side:", ball.offset_2() >= self.edge_l)
    
class WallWidth:
    def __init__(self, y, border, color):
        self.y = y
        self.border = border
        self.color = color
        self.normal = Vector(0,1)
        self.edge_t = y + border
        self.edge_b = y - border
        
    def draw(self, canvas):
        canvas.draw_line((0, self.y),
                         (CANVAS_WIDTH, self.y),
                          2*self.border+1,
                          self.color)
    def hit(self, ball):
        
        if self.edge_t >= ball.offset_u() >= self.edge_b:
            return 1
        
        elif self.edge_b <= ball.offset_d() <= self.edge_t:
            return -1

        else: return 0

class Ball:
    def __init__(self, pos, vel, radius, color):
        self.pos = pos
        self.vel = vel
        self.radius = radius
        self.color = color
        self.border = 1
        
    def update(self):
        self.pos.add(self.vel)
        self.vel.multiply(0.85)
    
    def offset_1(self):
        return self.pos.x - self.radius
    
    def offset_2(self):
        return self.pos.x + self.radius
        
    def offset_u(self):
        return self.pos.y + self.radius
    
    def offset_d(self):
        return self.pos.y - self.radius
    
    def stop(self, normal,s):
        if normal.x == 0:
            if (s == -1 and self.vel.y == -2) or (s == 1 and self.vel.y == 2):
                self.vel.y = 0
                
        else:
            if (s == -1 and self.vel.x == -2) or (s == 1 and self.vel.x == 2):
                self.vel.x = 0
            
    def draw(self, canvas):
        canvas.draw_circle(self.pos.get_p(),
                           self.radius,
                           self.border,
                           self.color,
                           self.color)
        
class Keyboard:
    def __init__(self):
        self.right = False
        self.left = False
        self.up = False
        self.down = False

    def keyDown(self, key):

        if key == simplegui.KEY_MAP['left']:
            self.left = True

        if key == simplegui.KEY_MAP['right']:
            self.right = True
            
        if key == simplegui.KEY_MAP['up']:
            self.up = True

        if key == simplegui.KEY_MAP['down']:
            self.down = True            

    def keyUp(self, key):
        if key == simplegui.KEY_MAP['up']:
            self.up = False
        
        if key == simplegui.KEY_MAP['down']:
            self.down = False
        
        if key == simplegui.KEY_MAP['left']:
            self.left = False
        
        if key == simplegui.KEY_MAP['right']:
            self.right = False
    
        
    def draw(self, canvas):
        canvas.draw_circle(self.pos.get_p(),
                           self.radius,
                           self.border,
                           self.color,
                           self.color)
        
class Interaction:
    def __init__(self, wall1, wall2, wall3, wall4, wall5, wall6, ball):
        self.wall1 = wall1
        self.wall2 = wall2
        self.wall3 = wall3
        self.wall4 = wall4
        self.wall5 = wall5
        self.wall6 = wall6

        self.ball = ball
        
        self.listofwalls =[wall1, wall2, wall3, wall4, wall5, wall6]
        
    def update(self):
                
        if kbd.right: 
            self.ball.vel.x = 2
   
        elif kbd.left:            
            self.ball.vel.x = -2
            
        if kbd.up:            
            self.ball.vel.y = -2
            
        elif kbd.down:            
            self.ball.vel.y = 2
        
        for wall in self.listofwalls:
            s = wall.hit(ball)
            if s!= 0:
                print ("hit")
                self.ball.stop(wall.normal, s)
      
        self.ball.update()
        
    def draw(self, canvas):
        self.update()
        self.wall1.draw(canvas)
        self.wall2.draw(canvas)
        self.wall3.draw(canvas)
        self.wall4.draw(canvas)
        self.wall5.draw(canvas)
        self.wall6.draw(canvas)
        self.ball.draw(canvas)
        
wall1 = WallLength(CANVAS_WIDTH - 598, 5, 'red')  
wall2 = WallLength(CANVAS_WIDTH - 2, 5, 'red')
wall3 = WallLength(CANVAS_WIDTH/2 - 2, 5, 'red')
wall4 = WallWidth(CANVAS_WIDTH - 598, 5, 'red')
wall5 = WallWidth(CANVAS_WIDTH/2 - 2, 5, 'red')
wall6 = WallWidth(CANVAS_WIDTH/4 - 2, 5, 'red')


ball = Ball(Vector(250, 20),
            Vector(0,0),
            10, 'blue')


kbd = Keyboard()
interaction = Interaction(wall1, wall2, wall3, wall4, wall5, wall6,
                          ball)

frame = simplegui.create_frame("Collide", CANVAS_WIDTH, CANVAS_HEIGHT)
frame.set_draw_handler(interaction.draw)
frame.set_keydown_handler(kbd.keyDown)
frame.set_keyup_handler(kbd.keyUp)
frame.start()
